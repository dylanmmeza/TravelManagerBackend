# Generated by Django 4.1 on 2023-01-03 23:13

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("users", "0001_initial"),
        ("events", "0001_initial"),
        ("trips", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BaseTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tag_left", models.CharField(max_length=50)),
                ("tag_right", models.CharField(max_length=50)),
                ("_tag_uuid", models.UUIDField(default=uuid.uuid4)),
                ("description", models.CharField(blank=True, max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name="EventTag",
            fields=[
                (
                    "basetag_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="tags.basetag",
                    ),
                ),
            ],
            bases=("tags.basetag",),
        ),
        migrations.CreateModel(
            name="TripTag",
            fields=[
                (
                    "basetag_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="tags.basetag",
                    ),
                ),
            ],
            bases=("tags.basetag",),
        ),
        migrations.CreateModel(
            name="TripTagUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("confidence_interval_lb", models.FloatField(default=0.4)),
                ("confidence_interval_ub", models.FloatField(default=0.6)),
                ("value", models.FloatField(default=0.5)),
                ("is_active", models.BooleanField(default=False)),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trip_tag_last_updated_by",
                        to="users.user_extension",
                    ),
                ),
                (
                    "tag_creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trip_tag_creator",
                        to="users.user_extension",
                    ),
                ),
                (
                    "trip",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trip_tag_usages",
                        to="trips.base_trip",
                    ),
                ),
                (
                    "trip_tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="tags.triptag"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="triptag",
            name="used_by_trips",
            field=models.ManyToManyField(
                related_name="trip_tags",
                through="tags.TripTagUsage",
                to="trips.base_trip",
            ),
        ),
        migrations.CreateModel(
            name="EventTagUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("confidence_interval_lb", models.FloatField(default=0.4)),
                ("confidence_interval_ub", models.FloatField(default=0.6)),
                ("value", models.FloatField(default=0.5)),
                ("is_active", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_tag_usages",
                        to="events.base_event",
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_tag_last_update_by",
                        to="users.user_extension",
                    ),
                ),
                (
                    "tag_creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_tag_creator",
                        to="users.user_extension",
                    ),
                ),
                (
                    "event_tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="tags.eventtag"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="eventtag",
            name="used_by_events",
            field=models.ManyToManyField(
                related_name="event_tags",
                through="tags.EventTagUsage",
                to="events.base_event",
            ),
        ),
    ]
